// Generated by CoffeeScript 1.9.2
(function() {
  var Browser, Config, Watcher,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Config = require("./Config.js");

  Watcher = (function() {
    Watcher.prototype.app = require("app");

    Watcher.prototype.fs = require("fs");

    Watcher.prototype.gaze = require("gaze");

    Watcher.prototype.exec = require('child_process').exec;

    function Watcher(parent) {
      this.parent = parent;
      this.reload_browser();
    }

    Watcher.prototype.reload_browser = function() {
      var me;
      me = this;
      return this.gaze(["*.js"], function(err, watcher) {
        return this.on("changed", (function(_this) {
          return function(filepath) {
            me.exec("run.bat");
            return setTimeout(function() {
              return me.app.terminate();
            }, 0);
          };
        })(this));
      });
    };

    return Watcher;

  })();

  Browser = (function() {
    Browser.prototype.url = "file://" + __dirname + "/contents/index.html";

    Browser.prototype.cson_path = "./ignore_data/browser.cson";

    Browser.prototype.config = new Config;

    Browser.prototype.data = {};

    Browser.prototype.fs = require("fs");

    Browser.prototype.app = require("app");

    Browser.prototype.ipc = require("ipc");

    Browser.prototype.cson = require("cson");

    Browser.prototype.BrowserWindow = require("browser-window");

    Browser.prototype.globalShortcut = require('global-shortcut');

    Browser.prototype.shell = require("shell");

    Browser.prototype.mainWindow = 0;

    function Browser() {
      this.send_msg = bind(this.send_msg, this);
      var e, result;
      this.watcher = new Watcher(this);
      try {
        result = this.cson.load(this.cson_path);
      } catch (_error) {
        e = _error;
        result = {
          x: 0,
          y: 240,
          width: 700,
          height: 800
        };
        this.fs.mkdir(this.config.ignore_data_dir, (function(_this) {
          return function() {
            return _this.fs.writeFile(_this.cson_path, _this.cson.createCSONString(result));
          };
        })(this));
      }
      this.data = result;
    }

    Browser.prototype.start = function() {
      require("crash-reporter").start();
      this.ipc_event();
      return this.app_start();
    };

    Browser.prototype.ipc_event = function() {
      return this.ipc.on('inspect element', (function(_this) {
        return function(event, arg, renderer) {
          return _this[renderer].inspectElement(arg.x, arg.y);
        };
      })(this));
    };

    Browser.prototype.app_start = function() {
      this.app.on("window-all-closed", (function(_this) {
        return function() {
          if (process.platform !== "darwin") {
            return _this.app.quit();
          }
        };
      })(this));
      return this.app.on("ready", (function(_this) {
        return function() {
          _this.make_window();
          return _this.etc();
        };
      })(this));
    };

    Browser.prototype.make_window = function() {
      this.mainWindow = new this.BrowserWindow({
        x: this.data.x,
        y: this.data.y,
        width: this.data.width,
        height: this.data.height
      });
      this.mainWindow.webContents.on("did-finish-load", (function(_this) {
        return function() {
          return console.log("load finished.");
        };
      })(this));
      this.mainWindow.loadUrl(this.url);
      this.mainWindow.openDevTools();
      return this.mainWindow.on("close", (function(_this) {
        return function(e) {
          var cson_string, obj, wh, xy;
          xy = _this.mainWindow.getPosition();
          wh = _this.mainWindow.getSize();
          obj = _this.cson.load(_this.cson_path);
          obj.x = xy[0];
          obj.y = xy[1];
          obj.width = wh[0];
          obj.height = wh[1];
          cson_string = _this.cson.createCSONString(obj);
          _this.fs.writeFileSync(_this.cson_path, cson_string);
          return _this.mainWindow = null;
        };
      })(this));
    };

    Browser.prototype.send_msg = function(msg) {
      var ref;
      return (ref = this.mainWindow) != null ? ref.webContents.send("browser send msg", msg) : void 0;
    };

    Browser.prototype.global_shortcut = function() {
      var ret;
      return ret = this.globalShortcut.register('ctrl+e', (function(_this) {
        return function() {
          return console.log((Date.now()) + " , ctrl+e is pressed");
        };
      })(this));
    };

    Browser.prototype.etc = function() {
      return this.global_shortcut();
    };

    return Browser;

  })();

  module.exports = Browser;

}).call(this);

//# sourceMappingURL=Browser.js.map
