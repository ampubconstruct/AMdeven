// Generated by CoffeeScript 1.9.2
(function() {
  var Compiler, CompilerSrc,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CompilerSrc = require("./CompilerSrc");

  Compiler = (function(superClass) {
    extend(Compiler, superClass);

    Compiler.prototype.fs = require("fs");

    Compiler.prototype.gaze = require("gaze");

    Compiler.prototype.babel = require("babel");

    Compiler.prototype.exec = require('child_process').exec;

    function Compiler() {
      this.watch = bind(this.watch, this);
      this.watch_sass = bind(this.watch_sass, this);
      this.watch_coffee = bind(this.watch_coffee, this);
      this.watch_babel = bind(this.watch_babel, this);
      this.watch();
    }

    Compiler.prototype.watch_babel = function() {
      var me;
      me = this;
      this.gaze(["*.es6", "contents/**/*.es6"], function(err, watcher) {
        return this.on("changed", me.compile_babel);
      });
      return me.log("Compiler, babel" + this.babel.version);
    };

    Compiler.prototype.watch_coffee = function*() {
      var me;
      me = this;
      (yield this.exec("coffee -v", (function(_this) {
        return function(e, stdout, stderr) {
          if (e) {
            return _this.log(e.message);
          }
          _this.log("Compiler, " + stdout);
          return _this.watch_coffee_gen.next();
        };
      })(this)));
      return this.gaze(["*.coffee", "contents/**/*.coffee"], function(err, watcher) {
        return this.on("changed", me.compile_coffee);
      });
    };

    Compiler.prototype.watch_sass = function*() {
      var me;
      me = this;
      (yield this.exec("sass -v", (function(_this) {
        return function(e, stdout, stderr) {
          if (e) {
            return;
          }
          _this.log("Compiler, " + stdout);
          return _this.watch_sass_gen.next();
        };
      })(this)));
      return this.gaze(["*.sass", "contents/**/*.sass"], function(err, watcher) {
        return this.on("changed", me.compile_sass);
      });
    };

    Compiler.prototype.watch = function() {
      this.watch_coffee_gen = this.watch_coffee();
      this.watch_coffee_gen.next();
      this.watch_sass_gen = this.watch_sass();
      this.watch_sass_gen.next();
      return this.watch_babel_gen = this.watch_babel();
    };

    return Compiler;

  })(CompilerSrc);

  new Compiler();

}).call(this);

//# sourceMappingURL=Compiler.js.map
