// Generated by CoffeeScript 1.9.3
(function() {
  var CommonJs, Config, Server,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  CommonJs = require("../proj/web/mylib/CommonJs.js");

  Config = require("../../Config.js");

  Server = (function(superClass) {
    extend(Server, superClass);

    function Server() {
      this.check_reload_list = bind(this.check_reload_list, this);
      this.send_css_reload_event = bind(this.send_css_reload_event, this);
      this.send_reload_event = bind(this.send_reload_event, this);
      return Server.__super__.constructor.apply(this, arguments);
    }

    Server.prototype.proj_path = "contents/proj/web";

    Server.prototype.http = require("http");

    Server.prototype.mime = require('mime');

    Server.prototype.sio = require('socket.io');

    Server.prototype.fs = require("fs");

    Server.prototype.gaze = require("gaze");

    Server.prototype.reload_list = [];

    Server.prototype.start = function(http_port, ws_port) {
      this.http_port = http_port != null ? http_port : this.http_port;
      this.ws_port = ws_port != null ? ws_port : this.ws_port;
      this.app = this.http.createServer((function(_this) {
        return function(req, res) {
          return _this.http_server_action(req, res);
        };
      })(this));
      return this.ws_start();
    };

    Server.prototype.http_server_action = function(req, res) {
      var data, date, exists_flag, ip, params, path, type, url;
      url = req.url.replace(/\/{2,}/, "/");
      params = this.get_params(url);
      url = url.replace(/\?.*$/, "");
      if (url[url.length - 1] === "/") {
        url += "index.html";
      }

      /*get file */
      path = "" + this.proj_path + url;
      exists_flag = this.fs.existsSync(path);
      if (exists_flag) {
        data = this.fs.readFileSync(path);
        type = this.mime.lookup(path);
        res.writeHead(200, {
          "Content-Type": type
        });
        res.end(data);
      } else {
        res.writeHead(404);
        res.end("404 - file not found");
      }

      /*access log */
      if (url.slice(url.length - 4, +(url.length - 1) + 1 || 9e9) === "html") {
        ip = req.connection.remoteAddress.replace(/.*[^\d](\d+\.\d+\.\d+\.\d+$)/, "$1");
        date = new Date().toLocaleTimeString();
        return console.log(date + " " + ip + " " + path);
      }
    };

    Server.prototype.ws_start = function() {
      if (this.ws_port === this.http_port) {
        this.websocket = this.sio(this.app);
      } else {
        this.websocket = this.sio(this.ws_port);
      }
      this.app.listen(this.http_port);
      this.websocket.on("connection", (function(_this) {
        return function(socket) {
          return socket.on("all", function() {
            return _this.reload_list.push(socket);
          });
        };
      })(this));
      return this.ws_event_reload();
    };

    Server.prototype.ws_event_reload = function() {
      var css_dir, dir, me;
      me = this;
      dir = [this.proj_path + "/**/*.js", this.proj_path + "/**/*.html"];
      this.gaze(dir, function(err, watcher) {
        return this.on("changed", (function(_this) {
          return function(filepath) {
            var j, len, ref, results, socket;
            me.check_reload_list();
            ref = me.reload_list;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              socket = ref[j];
              results.push(me.send_reload_event(socket));
            }
            return results;
          };
        })(this));
      });
      css_dir = [this.proj_path + "**/*.css"];
      return this.gaze(css_dir, function(err, watcher) {
        return this.on("changed", (function(_this) {
          return function(filepath) {
            var j, len, ref, results, socket;
            me.check_reload_list();
            ref = me.reload_list;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              socket = ref[j];
              results.push(me.send_css_reload_event(socket, filepath));
            }
            return results;
          };
        })(this));
      });
    };

    Server.prototype.send_reload_event = function(socket) {
      return socket.emit("reload");
    };

    Server.prototype.send_css_reload_event = function(socket, filepath) {
      return socket.emit("css reload", this.fs.readFileSync(filepath, {
        encoding: "utf-8"
      }));
    };

    Server.prototype.check_reload_list = function() {
      var arr, i, j, k, len, len1, num, ref, results, socket;
      arr = [];
      ref = this.reload_list;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        socket = ref[i];
        if (socket.disconnected) {
          arr.unshift(i);
        }
      }
      results = [];
      for (k = 0, len1 = arr.length; k < len1; k++) {
        num = arr[k];
        results.push(this.reload_list.splice(num, 1));
      }
      return results;
    };

    return Server;

  })(CommonJs);

  this.NodeApp = (function() {

    /* modules */
    NodeApp.prototype.http = require("http");

    NodeApp.prototype.https = require("https");

    NodeApp.prototype.fs = require("fs");

    NodeApp.prototype.cson = require("cson");

    NodeApp.prototype.Client = require('ftp');

    NodeApp.prototype.readline = require("readline");

    NodeApp.prototype.jsdom = require("jsdom");


    /* class */

    NodeApp.prototype.Server = Server;


    /* confing */

    NodeApp.prototype.jsdom_jquery_source = "./contents/proj/web/lib/jquery-2.1.3.min.js";

    NodeApp.prototype.ignore_regexp = /(\/node_modules\/)|(\/\.git\/)/;

    NodeApp.prototype.config = new Config;

    NodeApp.prototype.config_cson = {};

    function NodeApp(start) {
      if (start == null) {
        start = true;
      }
      this.check_dir_tree = bind(this.check_dir_tree, this);
      this.downloader = bind(this.downloader, this);
      this.ftp_downloader_fullpath = bind(this.ftp_downloader_fullpath, this);
      this.readline_func = bind(this.readline_func, this);
      this.ftp_downloader = bind(this.ftp_downloader, this);
      this.jsdom_check = bind(this.jsdom_check, this);
      this.csv_to_json = bind(this.csv_to_json, this);
      if (start) {
        this.init();
      }
    }

    NodeApp.prototype.init = function() {
      var e, result;
      this.server = new this.Server();

      /* config */
      try {
        result = this.cson.load(this.config.node_config_path);
      } catch (_error) {
        e = _error;
        result = {
          server: true
        };
        this.fs.mkdir(this.config.ignore_data_dir, (function(_this) {
          return function() {
            return _this.fs.writeFile(_this.config.node_config_path, _this.cson.createCSONString(result));
          };
        })(this));
      }
      this.config_cson = result;
      if (this.config_cson.server) {
        return this.server.start();
      }
    };


    /* library */

    NodeApp.prototype.csv_to_json = function(columns, csv_file, callback) {
      return require("csv-to-array")({
        file: csv_file,
        columns: columns
      }, callback);
    };

    NodeApp.prototype.jsdom_check = function(file, callback) {
      var obj;
      if (!this.jquery) {
        this.jquery = this.fs.readFileSync(this.jsdom_jquery_source, {
          encoding: "utf-8"
        });
      }
      obj = {
        src: [this.jquery],
        done: callback
      };
      if (file.match(/^http/)) {
        obj.url = file;
      } else {
        obj.file = file;
      }
      return this.jsdom.env(obj);
    };

    NodeApp.prototype.ftp_downloader = function(user, pass, file, host, filepath) {
      var c;
      c = new this.Client();
      c.on("ready", (function(_this) {
        return function() {
          return c.get("" + file, function(err, stream) {
            if (err) {
              throw err;
            }
            stream.once("close", function() {
              return c.end();
            });
            return stream.pipe(_this.fs.createWriteStream(filepath));
          });
        };
      })(this));
      return c.connect({
        host: host,
        user: user,
        password: pass
      });
    };

    NodeApp.prototype.readline_func = function(path, callback) {
      var rl, rs;
      rs = this.fs.ReadStream(path);
      rl = this.readline.createInterface({
        'input': rs,
        'output': {}
      });
      rl.on("line", callback);
      return rl.resume();
    };

    NodeApp.prototype.ftp_downloader_fullpath = function(url, filepath) {
      var file, host, name, pass;
      name = url.replace(/.*\/\/([^:]+).*/, "$1");
      pass = url.replace(/.*\/\/[^:]+:([^@]+).*/, "$1");
      file = url.replace(/.*\/([^\/]+$)/, "$1");
      host = url.replace(/.*@([^\/]+).*/, "$1");
      return this.ftp_downloader(name, pass, file, host, filepath);
    };

    NodeApp.prototype.downloader = function(url, filepath) {
      var file, protocol, request;
      file = this.fs.createWriteStream(filepath);
      protocol = url.match(/^https/) ? this.https : this.http;
      return request = protocol.get(url, (function(_this) {
        return function(response) {
          return response.pipe(file);
        };
      })(this));
    };

    NodeApp.prototype.check_dir_tree = function(dir, pattern, callback) {
      var file, files, j, len, loc, results;
      files = this.fs.readdirSync(dir);
      results = [];
      for (j = 0, len = files.length; j < len; j++) {
        file = files[j];
        loc = "" + dir + file;
        if (loc.match(this.ignore_regexp)) {
          continue;
        }
        if (this.fs.lstatSync(loc).isDirectory()) {
          results.push(this.check_dir_tree("" + dir + file + "/", pattern, callback));
        } else {
          if (!file.match(pattern)) {
            continue;
          }
          results.push(callback(loc, file));
        }
      }
      return results;
    };

    return NodeApp;

  })();

  module.exports = this.NodeApp;

}).call(this);
